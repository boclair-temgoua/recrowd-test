import type { NextPage } from 'next'
import Head from 'next/head'
import NavBar from '../../../components/NavBar';
import { Controller, useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";
import { useState, useEffect } from 'react';
import DatePicker from 'react-datepicker';
import dayjs from 'dayjs';
import { CreateOrUpdateInvestmentRequest, OneInvestmentResponse } from '../../core/_models';
import { TextInput } from '../../../../utils/forms/TextInput';
import { createOneInvestmentApi, getOneInvestmentApi, updateOneInvestmentApi } from '../../api/index';
import { useRouter } from 'next/router';
import { TextareaInput } from '../../../../utils/forms/TextareaInput';
import { useQuery } from '@tanstack/react-query';


const schema = yup
  .object({
    title: yup.string().min(3, 'Minimum 3 symbols').required(),
    amount: yup.number().required(),
    timeInvested: yup.number().required(),
    expiredMaxAt: yup.date().min(new Date(), 'Please choose future date').required(),
  })
  .required();


const InvestmentEdit: NextPage = () => {
  const router = useRouter();
  const { uuid } = router.query

  const [loading, setLoading] = useState(false)
  const [hasErrors, setHasErrors] = useState<boolean | string | undefined>(undefined)
  const { control, watch, register, handleSubmit, setValue,
    formState: { errors, isDirty, isValid }
  } = useForm<CreateOrUpdateInvestmentRequest>({ resolver: yupResolver(schema), mode: "onChange" });

  const fetchOneInvestment = async (uuid: string) => await getOneInvestmentApi({ investment_uuid: uuid })
  const { data } = useQuery(['investment', uuid], () => fetchOneInvestment(String(uuid)), {
    refetchOnWindowFocus: false,
  })
  const investment: any = data?.data

  useEffect(() => {
    if (investment) {
      const fields = ['title', 'currency', 'amount', 'description', 'timeInvested', 'expiredMaxAt'];
      fields?.forEach((field: any) => setValue(field, investment[field]));
    }
  }, [investment]);

  const onSubmit = (data: any) => {
    setLoading(true);
    setHasErrors(undefined)
    setTimeout(async () => {
      const payload = { ...data, investment_uuid: uuid }
      await updateOneInvestmentApi(payload)
        .then((response) => {
          setHasErrors(false);
          setLoading(false)
          router.push({ pathname: "/investments", })
        })
        .catch((error) => {
          setHasErrors(true)
          setLoading(false)
          setHasErrors(error.response.data.message);
        });
    }, 1000)

  };

  return (
    <div>
      <Head>
        <title>Edit Investment {investment?.title} | {process.env.NEXT_PUBLIC_NAME}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <div className="container py-3">
        <header>
          <NavBar />

          <div className="pricing-header p-3 pb-md-4 mx-auto text-center">
            <h1 className="display-4 fw-normal">Edit Investment</h1>
          </div>
        </header>

        <main>

          <form className="form fv-plugins-bootstrap5 fv-plugins-framework" onSubmit={handleSubmit(onSubmit)}>
            <div className="row">
              <div className="col-sm-6">
                <TextInput
                  className="form-control"
                  labelFlex="Title"
                  register={register}
                  errors={errors}
                  name="title"
                  type="text"
                  autoComplete="one"
                  placeholder="Enter title"
                  validation={{ required: true }}
                  required="required"
                  isRequired={true}
                />
              </div>
              <div className="col-sm-4">
                <TextInput
                  className="form-control"
                  labelFlex="Capitale desiderato"
                  register={register}
                  errors={errors}
                  name="amount"
                  type="number"
                  autoComplete="one"
                  placeholder="Capitale desiderato"
                  validation={{ required: true }}
                  required="required"
                  isRequired={true}
                />
              </div>
              <div className="col-sm-2">
                <label className="form-label fw-bolder text-dark fs-6 mb-2">
                  <span className={'required'}>{'Currency'}</span>
                  <i className="fas fa-exclamation-circle ms-2 fs-7"></i>
                </label>
                <input
                  className={`form-control`}
                  type="text"
                  placeholder="Currency"
                  id="currency"
                  {...register("currency", { value: "EUR" })}
                  autoComplete="off"
                  disabled
                />
              </div>
            </div>
            <div className="row">
              <div className="col-sm-4">
                <TextInput
                  className="form-control"
                  labelFlex="Durata investimento"
                  register={register}
                  errors={errors}
                  name="timeInvested"
                  type="number"
                  autoComplete="one"
                  placeholder="Durata investimento"
                  validation={{ required: true }}
                  required="required"
                  isRequired={true}
                />
              </div>
              <div className="col-sm-2">
                <label className="form-label fw-bolder text-dark fs-6 mb-2">
                  <span className={'required'}>{''}</span>
                  <i className="fas fa-exclamation-circle ms-2 fs-7"></i>
                </label>
                <input
                  className={`form-control`}
                  type="text"
                  placeholder="Mese"
                  autoComplete="off"
                  disabled
                />
              </div>
              <div className="col-md-6 fv-row fv-plugins-icon-container">
                <label htmlFor='expiredMaxAt' className="form-label fw-bolder text-dark fs-6 mb-2">
                  <span className={'required'}>Data massima in cui si può investire</span>
                </label>
                <Controller
                  name={"expiredMaxAt"}
                  control={control}
                  render={({ field: { onChange, value } }) => {
                    return (
                      <DatePicker
                        dateFormat="dd/MM/yyyy"
                        onChange={onChange}
                        className="form-control"
                        locale="it-IT"
                        minDate={new Date()}
                        isClearable={true}
                        selected={value ? dayjs(value).toDate() : null}
                        placeholderText="Data massima in cui si può investire"
                      />
                    );
                  }}
                />
                {errors?.expiredMaxAt && (
                  <strong className='fv-plugins-message-container text-danger'>
                    <div className='fv-help-block'>
                      <span role='alert'>{errors?.expiredMaxAt?.message}</span>
                    </div>
                  </strong>
                )}
              </div>

            </div>
            <div className="d-flex flex-column mb-8">
              <TextareaInput
                label="Description"
                className="form-control"
                register={register}
                errors={errors}
                name="description"
                placeholder="Description"
                validation={{ required: false }}
              />
            </div>


            <hr className="my-4" />

            <div className="w-100">
              <button type='submit' className='w-100 btn btn-lg btn-primary fw-bolder me-3'
                disabled={loading}
              >
                {!loading && <span className='indicator-label'>Submit</span>}
                {loading && (
                  <span className='indicator-progress' style={{ display: 'block' }}>
                    Please wait...
                    <span className='spinner-border spinner-border-sm align-middle ms-2'></span>
                  </span>
                )}
              </button>
              <button type="button" onClick={() => router.push({ pathname: "/investments", })} className="w-100 btn btn-light">Cancel</button>
            </div>

          </form>
        </main>

      </div>

    </div>
  )
}

export default InvestmentEdit
